'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="81c6594193e0e6fa79bb4ccd24d8b4e1230834b0";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:434,column:1}},"4":{start:{line:259,column:8},end:{line:259,column:16}},"5":{start:{line:260,column:8},end:{line:260,column:82}},"6":{start:{line:260,column:39},end:{line:260,column:82}},"7":{start:{line:261,column:8},end:{line:261,column:70}},"8":{start:{line:261,column:34},end:{line:261,column:70}},"9":{start:{line:263,column:8},end:{line:263,column:82}},"10":{start:{line:263,column:39},end:{line:263,column:82}},"11":{start:{line:264,column:8},end:{line:264,column:70}},"12":{start:{line:264,column:34},end:{line:264,column:70}},"13":{start:{line:266,column:8},end:{line:266,column:84}},"14":{start:{line:266,column:41},end:{line:266,column:84}},"15":{start:{line:267,column:8},end:{line:267,column:63}},"16":{start:{line:267,column:27},end:{line:267,column:63}},"17":{start:{line:269,column:8},end:{line:269,column:84}},"18":{start:{line:269,column:41},end:{line:269,column:84}},"19":{start:{line:270,column:8},end:{line:270,column:63}},"20":{start:{line:270,column:27},end:{line:270,column:63}},"21":{start:{line:272,column:8},end:{line:272,column:94}},"22":{start:{line:272,column:45},end:{line:272,column:94}},"23":{start:{line:273,column:8},end:{line:273,column:82}},"24":{start:{line:273,column:40},end:{line:273,column:82}},"25":{start:{line:275,column:8},end:{line:275,column:92}},"26":{start:{line:275,column:45},end:{line:275,column:92}},"27":{start:{line:277,column:8},end:{line:277,column:84}},"28":{start:{line:277,column:41},end:{line:277,column:84}},"29":{start:{line:278,column:8},end:{line:278,column:74}},"30":{start:{line:278,column:39},end:{line:278,column:74}},"31":{start:{line:280,column:8},end:{line:280,column:96}},"32":{start:{line:280,column:47},end:{line:280,column:96}},"33":{start:{line:281,column:8},end:{line:281,column:86}},"34":{start:{line:281,column:45},end:{line:281,column:86}},"35":{start:{line:284,column:8},end:{line:292,column:12}},"36":{start:{line:285,column:23},end:{line:285,column:61}},"37":{start:{line:286,column:12},end:{line:286,column:20}},"38":{start:{line:287,column:12},end:{line:287,column:115}},"39":{start:{line:287,column:37},end:{line:287,column:67}},"40":{start:{line:287,column:72},end:{line:287,column:115}},"41":{start:{line:289,column:28},end:{line:289,column:110}},"42":{start:{line:290,column:12},end:{line:290,column:32}},"43":{start:{line:291,column:12},end:{line:291,column:29}},"44":{start:{line:436,column:0},end:{line:436,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:258,column:4},end:{line:258,column:5}},loc:{start:{line:258,column:82},end:{line:293,column:5}},line:258},"1":{name:"(anonymous_1)",decl:{start:{line:284,column:16},end:{line:284,column:17}},loc:{start:{line:284,column:28},end:{line:292,column:9}},line:284},"2":{name:"(anonymous_2)",decl:{start:{line:287,column:34},end:{line:287,column:35}},loc:{start:{line:287,column:37},end:{line:287,column:67}},line:287}},branchMap:{"0":{loc:{start:{line:260,column:8},end:{line:260,column:82}},type:"if",locations:[{start:{line:260,column:8},end:{line:260,column:82}},{start:{line:260,column:8},end:{line:260,column:82}}],line:260},"1":{loc:{start:{line:261,column:8},end:{line:261,column:70}},type:"if",locations:[{start:{line:261,column:8},end:{line:261,column:70}},{start:{line:261,column:8},end:{line:261,column:70}}],line:261},"2":{loc:{start:{line:263,column:8},end:{line:263,column:82}},type:"if",locations:[{start:{line:263,column:8},end:{line:263,column:82}},{start:{line:263,column:8},end:{line:263,column:82}}],line:263},"3":{loc:{start:{line:264,column:8},end:{line:264,column:70}},type:"if",locations:[{start:{line:264,column:8},end:{line:264,column:70}},{start:{line:264,column:8},end:{line:264,column:70}}],line:264},"4":{loc:{start:{line:266,column:8},end:{line:266,column:84}},type:"if",locations:[{start:{line:266,column:8},end:{line:266,column:84}},{start:{line:266,column:8},end:{line:266,column:84}}],line:266},"5":{loc:{start:{line:267,column:8},end:{line:267,column:63}},type:"if",locations:[{start:{line:267,column:8},end:{line:267,column:63}},{start:{line:267,column:8},end:{line:267,column:63}}],line:267},"6":{loc:{start:{line:269,column:8},end:{line:269,column:84}},type:"if",locations:[{start:{line:269,column:8},end:{line:269,column:84}},{start:{line:269,column:8},end:{line:269,column:84}}],line:269},"7":{loc:{start:{line:270,column:8},end:{line:270,column:63}},type:"if",locations:[{start:{line:270,column:8},end:{line:270,column:63}},{start:{line:270,column:8},end:{line:270,column:63}}],line:270},"8":{loc:{start:{line:272,column:8},end:{line:272,column:94}},type:"if",locations:[{start:{line:272,column:8},end:{line:272,column:94}},{start:{line:272,column:8},end:{line:272,column:94}}],line:272},"9":{loc:{start:{line:273,column:8},end:{line:273,column:82}},type:"if",locations:[{start:{line:273,column:8},end:{line:273,column:82}},{start:{line:273,column:8},end:{line:273,column:82}}],line:273},"10":{loc:{start:{line:275,column:8},end:{line:275,column:92}},type:"if",locations:[{start:{line:275,column:8},end:{line:275,column:92}},{start:{line:275,column:8},end:{line:275,column:92}}],line:275},"11":{loc:{start:{line:277,column:8},end:{line:277,column:84}},type:"if",locations:[{start:{line:277,column:8},end:{line:277,column:84}},{start:{line:277,column:8},end:{line:277,column:84}}],line:277},"12":{loc:{start:{line:278,column:8},end:{line:278,column:74}},type:"if",locations:[{start:{line:278,column:8},end:{line:278,column:74}},{start:{line:278,column:8},end:{line:278,column:74}}],line:278},"13":{loc:{start:{line:280,column:8},end:{line:280,column:96}},type:"if",locations:[{start:{line:280,column:8},end:{line:280,column:96}},{start:{line:280,column:8},end:{line:280,column:96}}],line:280},"14":{loc:{start:{line:281,column:8},end:{line:281,column:86}},type:"if",locations:[{start:{line:281,column:8},end:{line:281,column:86}},{start:{line:281,column:8},end:{line:281,column:86}}],line:281},"15":{loc:{start:{line:287,column:12},end:{line:287,column:115}},type:"if",locations:[{start:{line:287,column:12},end:{line:287,column:115}},{start:{line:287,column:12},end:{line:287,column:115}}],line:287}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{// //----------------USERS--------------------//
// /**
// * Registers a user.
// * 
// * @param {string} name 
// * @param {string} surname 
// * @param {string} email 
// * @param {string} password 
// * @param {string} passwordConfirmation 
// */
// registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
// retrieveUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//             user.id = user._id.toString()
//             delete user._id
//             return user
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//     })()
// },
// updateUser(userId, data) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!data) throw Error('data should be defined')
//     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)
//     return (async () => {
//         try {
//             let result = await User.findByIdAndUpdate(userId, { $set: data }, { new: true, runValidators: true }).select('-__v').lean()
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateUserPicture(userId, url) {
//     debugger
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//         let pictures = [...user.pictures, url]
//         user = await User.findByIdAndUpdate(userId, { pictures }, { new: true, runValidators: true }).select('-__v ').lean()
//         user.id = user._id.toString()
//         delete user._id
//         return user
//     })()
// },
// updateBoat(userId, boat) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!Object.keys(boat).length) throw Error('boat should be defined')
//     if (boat.constructor !== Object) throw TypeError(`${boat} is not an object`)
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//             const boats = user.boats
//             let boatIndex = boats.findIndex(userBoat => userBoat.id === boat.id)
//             if (boatIndex === -1) boats.push(boat)
//             else boats.splice(boatIndex, 1, boat)
//             user.markModified('boats')
//             await user.save()
//             return boats[boatIndex]
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateBoatPicture(userId, boatId, url) {
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof boatId !== 'string') throw TypeError(`${boatId} is not a string`)
//     if (!boatId.trim().length) throw Error('boatId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//         let boatIndex = user.boats.findIndex(boat => boat.id === boatId)
//         if (boatIndex < 0) throw new Error(`boat with id ${boatId} not found`)
//         const boat = user.boats[boatIndex]
//         boat.pictures = [...boat.pictures, url]
//         user.markModified('boats')
//         await user.save()
//         return user.boats[boatIndex]
//     })()
// },
// searchUsers(talents, languages) {
//     if (talents.constructor !== Array) throw TypeError(`${talents} is not an array`)
//     if (languages.constructor !== Array) throw TypeError(`${languages} is not an array`)
//     return (async () => {
//         let results
//         let talentsToFilter = []
//         let languagesToFilter = []
//         talents.forEach(talent => talentsToFilter.push({ "talents": talent }))
//         languages.forEach(language => languagesToFilter.push({ "languages": language }))
//         if (!talents.length && !languages.length) results = await User.find().lean()
//         else if (!talents.length) results = await User.find({ $or: languagesToFilter }).lean()
//         else if (!languages.length) results = await User.find({ $or: talentsToFilter }).lean()
//         else results = await User.find({ $and: [{ $or: talentsToFilter }, { $or: languagesToFilter }] }).lean()
//         results = results.map(result => {
//             result.id = result._id.toString()
//             delete result._id
//             delete result.__v
//             return result
//         })
//         return results
//     })()
// },
// removeUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return User.findByIdAndDelete(userId)
// },
// //----------------JOURNEYS--------------------//
addJourney(title,seaId,route,dates,description,userId,boat,lookingFor){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;debugger;cov_2gv5sl3f77.s[5]++;if(typeof title!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[6]++;throw TypeError(title+' is not a string');}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[7]++;if(!title.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[8]++;throw Error('title cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[9]++;if(typeof seaId!=='string'){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[10]++;throw TypeError(seaId+' is not a string');}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[11]++;if(!seaId.trim().length){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[12]++;throw Error('seaId cannot be empty');}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[13]++;if(route.constructor!==Array){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[14]++;throw TypeError(route+' is not an Array');}else{cov_2gv5sl3f77.b[4][1]++;}cov_2gv5sl3f77.s[15]++;if(!route.length){cov_2gv5sl3f77.b[5][0]++;cov_2gv5sl3f77.s[16]++;throw Error('route cannot be empty');}else{cov_2gv5sl3f77.b[5][1]++;}cov_2gv5sl3f77.s[17]++;if(dates.constructor!==Array){cov_2gv5sl3f77.b[6][0]++;cov_2gv5sl3f77.s[18]++;throw TypeError(dates+' is not an Array');}else{cov_2gv5sl3f77.b[6][1]++;}cov_2gv5sl3f77.s[19]++;if(!dates.length){cov_2gv5sl3f77.b[7][0]++;cov_2gv5sl3f77.s[20]++;throw Error('dates cannot be empty');}else{cov_2gv5sl3f77.b[7][1]++;}cov_2gv5sl3f77.s[21]++;if(typeof description!=='string'){cov_2gv5sl3f77.b[8][0]++;cov_2gv5sl3f77.s[22]++;throw TypeError(description+' is not a string');}else{cov_2gv5sl3f77.b[8][1]++;}cov_2gv5sl3f77.s[23]++;if(!description.trim().length){cov_2gv5sl3f77.b[9][0]++;cov_2gv5sl3f77.s[24]++;throw Error('description cannot be empty');}else{cov_2gv5sl3f77.b[9][1]++;}cov_2gv5sl3f77.s[25]++;if(userId.constructor!==ObjectId){cov_2gv5sl3f77.b[10][0]++;cov_2gv5sl3f77.s[26]++;throw TypeError(userId+' is not an ObjectId');}else{cov_2gv5sl3f77.b[10][1]++;}cov_2gv5sl3f77.s[27]++;if(boat.constructor!==Object){cov_2gv5sl3f77.b[11][0]++;cov_2gv5sl3f77.s[28]++;throw TypeError(boat+' is not an Object');}else{cov_2gv5sl3f77.b[11][1]++;}cov_2gv5sl3f77.s[29]++;if(!Object.keys(boat).length){cov_2gv5sl3f77.b[12][0]++;cov_2gv5sl3f77.s[30]++;throw Error('boat cannot be empty');}else{cov_2gv5sl3f77.b[12][1]++;}cov_2gv5sl3f77.s[31]++;if(lookingFor.constructor!==Object){cov_2gv5sl3f77.b[13][0]++;cov_2gv5sl3f77.s[32]++;throw TypeError(lookingFor+' is not an Object');}else{cov_2gv5sl3f77.b[13][1]++;}cov_2gv5sl3f77.s[33]++;if(!Object.keys(lookingFor).length){cov_2gv5sl3f77.b[14][0]++;cov_2gv5sl3f77.s[34]++;throw Error('lookingFor cannot be empty');}else{cov_2gv5sl3f77.b[14][1]++;}cov_2gv5sl3f77.s[35]++;return(async()=>{cov_2gv5sl3f77.f[1]++;let user=(cov_2gv5sl3f77.s[36]++,await User.findById(userId.toString()));cov_2gv5sl3f77.s[37]++;debugger;cov_2gv5sl3f77.s[38]++;if(!user.boats.find(b=>{cov_2gv5sl3f77.f[2]++;cov_2gv5sl3f77.s[39]++;return b.toString()===boat.toString();})){cov_2gv5sl3f77.b[15][0]++;cov_2gv5sl3f77.s[40]++;throw Error('boat does not belong to user');}else{cov_2gv5sl3f77.b[15][1]++;}const journey=(cov_2gv5sl3f77.s[41]++,new Journey({title,seaId,route,dates,description,userId,boat,lookingFor}));cov_2gv5sl3f77.s[42]++;await journey.save();cov_2gv5sl3f77.s[43]++;return journey.id;})();}});cov_2gv5sl3f77.s[44]++;module.exports=logic;