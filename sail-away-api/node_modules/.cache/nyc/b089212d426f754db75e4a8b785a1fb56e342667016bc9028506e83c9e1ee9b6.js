'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="67364e303b8843c8febf1973aa03f85dae4edc37";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:435,column:1}},"4":{start:{line:181,column:8},end:{line:181,column:84}},"5":{start:{line:181,column:40},end:{line:181,column:84}},"6":{start:{line:182,column:8},end:{line:182,column:72}},"7":{start:{line:182,column:35},end:{line:182,column:72}},"8":{start:{line:184,column:8},end:{line:184,column:84}},"9":{start:{line:184,column:40},end:{line:184,column:84}},"10":{start:{line:185,column:8},end:{line:185,column:72}},"11":{start:{line:185,column:35},end:{line:185,column:72}},"12":{start:{line:187,column:8},end:{line:187,column:78}},"13":{start:{line:187,column:37},end:{line:187,column:78}},"14":{start:{line:188,column:8},end:{line:188,column:66}},"15":{start:{line:188,column:32},end:{line:188,column:66}},"16":{start:{line:190,column:8},end:{line:210,column:12}},"17":{start:{line:191,column:12},end:{line:198,column:13}},"18":{start:{line:193,column:27},end:{line:193,column:79}},"19":{start:{line:197,column:16},end:{line:197,column:67}},"20":{start:{line:200,column:28},end:{line:200,column:76}},"21":{start:{line:200,column:57},end:{line:200,column:75}},"22":{start:{line:201,column:12},end:{line:201,column:82}},"23":{start:{line:201,column:31},end:{line:201,column:82}},"24":{start:{line:203,column:25},end:{line:203,column:46}},"25":{start:{line:204,column:12},end:{line:204,column:51}},"26":{start:{line:206,column:12},end:{line:206,column:38}},"27":{start:{line:207,column:12},end:{line:207,column:29}},"28":{start:{line:209,column:12},end:{line:209,column:40}},"29":{start:{line:437,column:0},end:{line:437,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:180,column:4},end:{line:180,column:5}},loc:{start:{line:180,column:43},end:{line:211,column:5}},line:180},"1":{name:"(anonymous_1)",decl:{start:{line:190,column:16},end:{line:190,column:17}},loc:{start:{line:190,column:28},end:{line:210,column:9}},line:190},"2":{name:"(anonymous_2)",decl:{start:{line:200,column:49},end:{line:200,column:50}},loc:{start:{line:200,column:57},end:{line:200,column:75}},line:200}},branchMap:{"0":{loc:{start:{line:181,column:8},end:{line:181,column:84}},type:"if",locations:[{start:{line:181,column:8},end:{line:181,column:84}},{start:{line:181,column:8},end:{line:181,column:84}}],line:181},"1":{loc:{start:{line:182,column:8},end:{line:182,column:72}},type:"if",locations:[{start:{line:182,column:8},end:{line:182,column:72}},{start:{line:182,column:8},end:{line:182,column:72}}],line:182},"2":{loc:{start:{line:184,column:8},end:{line:184,column:84}},type:"if",locations:[{start:{line:184,column:8},end:{line:184,column:84}},{start:{line:184,column:8},end:{line:184,column:84}}],line:184},"3":{loc:{start:{line:185,column:8},end:{line:185,column:72}},type:"if",locations:[{start:{line:185,column:8},end:{line:185,column:72}},{start:{line:185,column:8},end:{line:185,column:72}}],line:185},"4":{loc:{start:{line:187,column:8},end:{line:187,column:78}},type:"if",locations:[{start:{line:187,column:8},end:{line:187,column:78}},{start:{line:187,column:8},end:{line:187,column:78}}],line:187},"5":{loc:{start:{line:188,column:8},end:{line:188,column:66}},type:"if",locations:[{start:{line:188,column:8},end:{line:188,column:66}},{start:{line:188,column:8},end:{line:188,column:66}}],line:188},"6":{loc:{start:{line:201,column:12},end:{line:201,column:82}},type:"if",locations:[{start:{line:201,column:12},end:{line:201,column:82}},{start:{line:201,column:12},end:{line:201,column:82}}],line:201}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{// //----------------USERS--------------------//
// /**
// * Registers a user.
// * 
// * @param {string} name 
// * @param {string} surname 
// * @param {string} email 
// * @param {string} password 
// * @param {string} passwordConfirmation 
// */
// registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
// retrieveUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//             user.id = user._id.toString()
//             delete user._id
//             return user
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//     })()
// },
// updateUser(userId, data) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!data) throw Error('data should be defined')
//     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)
//     return (async () => {
//         try {
//             let result = await User.findByIdAndUpdate(userId, { $set: data }, { new: true, runValidators: true }).select('-__v').lean()
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateUserPicture(userId, url) {
//     debugger
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//         let pictures = [...user.pictures, url]
//         user = await User.findByIdAndUpdate(userId, { pictures }, { new: true, runValidators: true }).select('-__v ').lean()
//         user.id = user._id.toString()
//         delete user._id
//         return user
//     })()
// },
// updateBoat(userId, boat) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!Object.keys(boat).length) throw Error('boat should be defined')
//     if (boat.constructor !== Object) throw TypeError(`${boat} is not an object`)
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//             const boats = user.boats
//             let boatIndex = boats.findIndex(userBoat => userBoat.id === boat.id)
//             if (boatIndex === -1) boats.push(boat)
//             else boats.splice(boatIndex, 1, boat)
//             user.markModified('boats')
//             await user.save()
//             return boats[boatIndex]
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
updateBoatPicture(userId,boatId,url){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;if(typeof userId!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[5]++;throw TypeError(`${userId} is not a string`);}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[6]++;if(!userId.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[7]++;throw Error('userId cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[8]++;if(typeof boatId!=='string'){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[9]++;throw TypeError(`${boatId} is not a string`);}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[10]++;if(!boatId.trim().length){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[11]++;throw Error('boatId cannot be empty');}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[12]++;if(typeof url!=='string'){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[13]++;throw TypeError(`${url} is not a string`);}else{cov_2gv5sl3f77.b[4][1]++;}cov_2gv5sl3f77.s[14]++;if(!url.trim().length){cov_2gv5sl3f77.b[5][0]++;cov_2gv5sl3f77.s[15]++;throw Error('url cannot be empty');}else{cov_2gv5sl3f77.b[5][1]++;}cov_2gv5sl3f77.s[16]++;return(async()=>{cov_2gv5sl3f77.f[1]++;cov_2gv5sl3f77.s[17]++;try{let user=(cov_2gv5sl3f77.s[18]++,await User.findById(userId).select('-password -__v'));}catch(error){cov_2gv5sl3f77.s[19]++;throw new Error(`user with id ${userId} not found`);}let boatIndex=(cov_2gv5sl3f77.s[20]++,user.boats.findIndex(boat=>{cov_2gv5sl3f77.f[2]++;cov_2gv5sl3f77.s[21]++;return boat.id===boatId;}));cov_2gv5sl3f77.s[22]++;if(boatIndex<0){cov_2gv5sl3f77.b[6][0]++;cov_2gv5sl3f77.s[23]++;throw new Error(`boat with id ${boatId} not found`);}else{cov_2gv5sl3f77.b[6][1]++;}const boat=(cov_2gv5sl3f77.s[24]++,user.boats[boatIndex]);cov_2gv5sl3f77.s[25]++;boat.pictures=[...boat.pictures,url];cov_2gv5sl3f77.s[26]++;user.markModified('boats');cov_2gv5sl3f77.s[27]++;await user.save();cov_2gv5sl3f77.s[28]++;return user.boats[boatIndex];})();}});cov_2gv5sl3f77.s[29]++;module.exports=logic;