'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="3b1d24f36c00db673a5b7e45038a1135276c6499";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:414,column:1}},"4":{start:{line:172,column:8},end:{line:172,column:16}},"5":{start:{line:173,column:8},end:{line:173,column:84}},"6":{start:{line:173,column:40},end:{line:173,column:84}},"7":{start:{line:174,column:8},end:{line:174,column:72}},"8":{start:{line:174,column:35},end:{line:174,column:72}},"9":{start:{line:176,column:8},end:{line:176,column:78}},"10":{start:{line:176,column:37},end:{line:176,column:78}},"11":{start:{line:177,column:8},end:{line:177,column:66}},"12":{start:{line:177,column:32},end:{line:177,column:66}},"13":{start:{line:180,column:8},end:{line:196,column:12}},"14":{start:{line:181,column:12},end:{line:186,column:13}},"15":{start:{line:182,column:27},end:{line:182,column:86}},"16":{start:{line:185,column:16},end:{line:185,column:71}},"17":{start:{line:188,column:27},end:{line:188,column:50}},"18":{start:{line:190,column:12},end:{line:190,column:128}},"19":{start:{line:192,column:12},end:{line:192,column:41}},"20":{start:{line:193,column:12},end:{line:193,column:27}},"21":{start:{line:195,column:12},end:{line:195,column:23}},"22":{start:{line:416,column:0},end:{line:416,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:171,column:4},end:{line:171,column:5}},loc:{start:{line:171,column:35},end:{line:197,column:5}},line:171},"1":{name:"(anonymous_1)",decl:{start:{line:180,column:16},end:{line:180,column:17}},loc:{start:{line:180,column:28},end:{line:196,column:9}},line:180}},branchMap:{"0":{loc:{start:{line:173,column:8},end:{line:173,column:84}},type:"if",locations:[{start:{line:173,column:8},end:{line:173,column:84}},{start:{line:173,column:8},end:{line:173,column:84}}],line:173},"1":{loc:{start:{line:174,column:8},end:{line:174,column:72}},type:"if",locations:[{start:{line:174,column:8},end:{line:174,column:72}},{start:{line:174,column:8},end:{line:174,column:72}}],line:174},"2":{loc:{start:{line:176,column:8},end:{line:176,column:78}},type:"if",locations:[{start:{line:176,column:8},end:{line:176,column:78}},{start:{line:176,column:8},end:{line:176,column:78}}],line:176},"3":{loc:{start:{line:177,column:8},end:{line:177,column:66}},type:"if",locations:[{start:{line:177,column:8},end:{line:177,column:66}},{start:{line:177,column:8},end:{line:177,column:66}}],line:177}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{//----------------USERS--------------------//
/**
    * Registers a user.
    * 
    * @param {string} name 
    * @param {string} surname 
    * @param {string} email 
    * @param {string} password 
    * @param {string} passwordConfirmation 
    */ // registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
// retrieveUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return User.findById(userId).select('-password -__v').lean()
//         .then(user => {
//             if (!user) throw Error(`user with id ${userId} not found`)
//             user.id = user._id.toString()
//             delete user._id
//             return user
//         })
//         .catch(error => { throw Error(`user with id ${userId} not found`) })
// },
// searchUsers(talents, languages) {
//     //TODO
//     return (async () => {
//         let results
//         let talentsToFilter = []
//         let languagesToFilter = []
//         talents.forEach(talent => talentsToFilter.push({ "talents": talent }))
//         languages.forEach(language => languagesToFilter.push({ "languages": language }))
//         if (!talents.length && !languages.length) results = await User.find().lean()
//         else if (!talents.length) results = await User.find({ $or: languagesToFilter }).lean()
//         else if (!languages.length) results = await User.find({ $or: talentsToFilter }).lean()
//         else results = await User.find({ $and: [{ $or: talentsToFilter }, { $or: languagesToFilter }] }).lean()
//         results = results.map(result => {
//             result.id = result._id.toString()
//             delete result._id
//             delete result.__v
//             return result
//         })
//         return results
//     })()
// },
// updateUser(userId, data) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!data) throw Error('data should be defined')
//     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)
//     return (async () => {
//         const result = await User.findByIdAndUpdate(userId, { $set: data }, { new: true, runValidators: true }).select('-__v').lean()
//         if (!result) throw Error('journey could not be updated')
//         else {
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         }
//     })()
// },
// updateBoat(userId, boat) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!boat) throw Error('boat should be defined')
//     if (boat.constructor !== Object) throw TypeError(`${boat} is not an object`)
//     return (async () => {
//         let user = await User.findById(userId).select('-password -__v')
//         if (!user) throw new Error(`user with userId ${userId} not found`)
//         const boats =  user.boats
//         let boatIndex = boats.findIndex(userBoat => userBoat.id === boat.id)
//         if (boatIndex === -1) boats.push(boat)
//         else boats.splice(boatIndex, 1, boat)
//         await user.save()
//         debugger
//         return boats[boatIndex]
//     })()
// },
updateUserPicture(userId,url){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;debugger;cov_2gv5sl3f77.s[5]++;if(typeof userId!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[6]++;throw TypeError(`${userId} is not a string`);}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[7]++;if(!userId.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[8]++;throw Error('userId cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[9]++;if(typeof url!=='string'){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[10]++;throw TypeError(`${url} is not a string`);}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[11]++;if(!url.trim().length){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[12]++;throw Error('url cannot be empty');}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[13]++;return(async()=>{cov_2gv5sl3f77.f[1]++;cov_2gv5sl3f77.s[14]++;try{let user=(cov_2gv5sl3f77.s[15]++,await User.findById(userId).select('-password -__v').lean());}catch(error){cov_2gv5sl3f77.s[16]++;throw new Error(`user with userId ${userId} not found`);}let pictures=(cov_2gv5sl3f77.s[17]++,[...user.pictures,url]);cov_2gv5sl3f77.s[18]++;user=await User.findByIdAndUpdate(userId,{pictures},{new:true,runValidators:true}).select('-__v ').lean();cov_2gv5sl3f77.s[19]++;user.id=user._id.toString();cov_2gv5sl3f77.s[20]++;delete user._id;cov_2gv5sl3f77.s[21]++;return user;})();}});cov_2gv5sl3f77.s[22]++;module.exports=logic;