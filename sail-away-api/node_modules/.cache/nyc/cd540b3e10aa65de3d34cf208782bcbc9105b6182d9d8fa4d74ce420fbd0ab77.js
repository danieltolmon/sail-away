'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="459b490b490ee0aec79ef91a48ce7921ba1094bf";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:417,column:1}},"4":{start:{line:81,column:8},end:{line:81,column:84}},"5":{start:{line:81,column:40},end:{line:81,column:84}},"6":{start:{line:82,column:8},end:{line:82,column:72}},"7":{start:{line:82,column:35},end:{line:82,column:72}},"8":{start:{line:84,column:8},end:{line:96,column:10}},"9":{start:{line:85,column:12},end:{line:89,column:13}},"10":{start:{line:86,column:27},end:{line:86,column:86}},"11":{start:{line:88,column:16},end:{line:88,column:71}},"12":{start:{line:91,column:12},end:{line:91,column:41}},"13":{start:{line:93,column:12},end:{line:93,column:27}},"14":{start:{line:95,column:12},end:{line:95,column:23}},"15":{start:{line:134,column:8},end:{line:134,column:84}},"16":{start:{line:134,column:40},end:{line:134,column:84}},"17":{start:{line:135,column:8},end:{line:135,column:72}},"18":{start:{line:135,column:35},end:{line:135,column:72}},"19":{start:{line:137,column:8},end:{line:137,column:56}},"20":{start:{line:137,column:19},end:{line:137,column:56}},"21":{start:{line:138,column:8},end:{line:138,column:84}},"22":{start:{line:138,column:41},end:{line:138,column:84}},"23":{start:{line:140,column:8},end:{line:149,column:12}},"24":{start:{line:141,column:27},end:{line:141,column:137}},"25":{start:{line:143,column:12},end:{line:148,column:13}},"26":{start:{line:143,column:25},end:{line:143,column:68}},"27":{start:{line:145,column:16},end:{line:145,column:49}},"28":{start:{line:146,column:16},end:{line:146,column:33}},"29":{start:{line:147,column:16},end:{line:147,column:29}},"30":{start:{line:419,column:0},end:{line:419,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:25},end:{line:98,column:5}},line:79},"1":{name:"(anonymous_1)",decl:{start:{line:84,column:16},end:{line:84,column:17}},loc:{start:{line:84,column:26},end:{line:96,column:9}},line:84},"2":{name:"(anonymous_2)",decl:{start:{line:132,column:4},end:{line:132,column:5}},loc:{start:{line:132,column:29},end:{line:150,column:5}},line:132},"3":{name:"(anonymous_3)",decl:{start:{line:140,column:16},end:{line:140,column:17}},loc:{start:{line:140,column:28},end:{line:149,column:9}},line:140}},branchMap:{"0":{loc:{start:{line:81,column:8},end:{line:81,column:84}},type:"if",locations:[{start:{line:81,column:8},end:{line:81,column:84}},{start:{line:81,column:8},end:{line:81,column:84}}],line:81},"1":{loc:{start:{line:82,column:8},end:{line:82,column:72}},type:"if",locations:[{start:{line:82,column:8},end:{line:82,column:72}},{start:{line:82,column:8},end:{line:82,column:72}}],line:82},"2":{loc:{start:{line:134,column:8},end:{line:134,column:84}},type:"if",locations:[{start:{line:134,column:8},end:{line:134,column:84}},{start:{line:134,column:8},end:{line:134,column:84}}],line:134},"3":{loc:{start:{line:135,column:8},end:{line:135,column:72}},type:"if",locations:[{start:{line:135,column:8},end:{line:135,column:72}},{start:{line:135,column:8},end:{line:135,column:72}}],line:135},"4":{loc:{start:{line:137,column:8},end:{line:137,column:56}},type:"if",locations:[{start:{line:137,column:8},end:{line:137,column:56}},{start:{line:137,column:8},end:{line:137,column:56}}],line:137},"5":{loc:{start:{line:138,column:8},end:{line:138,column:84}},type:"if",locations:[{start:{line:138,column:8},end:{line:138,column:84}},{start:{line:138,column:8},end:{line:138,column:84}}],line:138},"6":{loc:{start:{line:143,column:12},end:{line:148,column:13}},type:"if",locations:[{start:{line:143,column:12},end:{line:148,column:13}},{start:{line:143,column:12},end:{line:148,column:13}}],line:143}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{//----------------USERS--------------------//
/**
    * Registers a user.
    * 
    * @param {string} name 
    * @param {string} surname 
    * @param {string} email 
    * @param {string} password 
    * @param {string} passwordConfirmation 
    */ // registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
retrieveUser(userId){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;if(typeof userId!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[5]++;throw TypeError(userId+' is not a string');}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[6]++;if(!userId.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[7]++;throw Error('userId cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[8]++;return async()=>{cov_2gv5sl3f77.f[1]++;cov_2gv5sl3f77.s[9]++;try{let user=(cov_2gv5sl3f77.s[10]++,await User.findById(userId).select('-password -__v').lean());}catch(error){cov_2gv5sl3f77.s[11]++;throw new Error(`user with userId ${userId} not found`);}cov_2gv5sl3f77.s[12]++;user.id=user._id.toString();cov_2gv5sl3f77.s[13]++;delete user._id;cov_2gv5sl3f77.s[14]++;return user;};},// searchUsers(talents, languages) {
//     //TODO
//     return (async () => {
//         let results
//         let talentsToFilter = []
//         let languagesToFilter = []
//         talents.forEach(talent => talentsToFilter.push({ "talents": talent }))
//         languages.forEach(language => languagesToFilter.push({ "languages": language }))
//         if (!talents.length && !languages.length) results = await User.find().lean()
//         else if (!talents.length) results = await User.find({ $or: languagesToFilter }).lean()
//         else if (!languages.length) results = await User.find({ $or: talentsToFilter }).lean()
//         else results = await User.find({ $and: [{ $or: talentsToFilter }, { $or: languagesToFilter }] }).lean()
//         results = results.map(result => {
//             result.id = result._id.toString()
//             delete result._id
//             delete result.__v
//             return result
//         })
//         return results
//     })()
// },
updateUser(userId,data){cov_2gv5sl3f77.f[2]++;cov_2gv5sl3f77.s[15]++;if(typeof userId!=='string'){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[16]++;throw TypeError(userId+' is not a string');}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[17]++;if(!userId.trim().length){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[18]++;throw Error('userId cannot be empty');}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[19]++;if(!data){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[20]++;throw Error('data should be defined');}else{cov_2gv5sl3f77.b[4][1]++;}cov_2gv5sl3f77.s[21]++;if(data.constructor!==Object){cov_2gv5sl3f77.b[5][0]++;cov_2gv5sl3f77.s[22]++;throw TypeError(`${data} is not an object`);}else{cov_2gv5sl3f77.b[5][1]++;}cov_2gv5sl3f77.s[23]++;return(async()=>{cov_2gv5sl3f77.f[3]++;const result=(cov_2gv5sl3f77.s[24]++,await User.findByIdAndUpdate(userId,{$set:data},{new:true,runValidators:true}).select('-__v').lean());cov_2gv5sl3f77.s[25]++;if(!result){cov_2gv5sl3f77.b[6][0]++;cov_2gv5sl3f77.s[26]++;throw Error('journey could not be updated');}else{cov_2gv5sl3f77.b[6][1]++;cov_2gv5sl3f77.s[27]++;result.id=result._id.toString();cov_2gv5sl3f77.s[28]++;delete result._id;cov_2gv5sl3f77.s[29]++;return result;}})();}});cov_2gv5sl3f77.s[30]++;module.exports=logic;