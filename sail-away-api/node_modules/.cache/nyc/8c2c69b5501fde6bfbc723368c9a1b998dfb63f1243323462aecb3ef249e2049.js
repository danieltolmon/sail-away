'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="e002595e53827c3e68fe5e89d301b88fd68866a4";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:431,column:1}},"4":{start:{line:153,column:8},end:{line:153,column:84}},"5":{start:{line:153,column:40},end:{line:153,column:84}},"6":{start:{line:154,column:8},end:{line:154,column:72}},"7":{start:{line:154,column:35},end:{line:154,column:72}},"8":{start:{line:156,column:8},end:{line:156,column:76}},"9":{start:{line:156,column:39},end:{line:156,column:76}},"10":{start:{line:157,column:8},end:{line:157,column:84}},"11":{start:{line:157,column:41},end:{line:157,column:84}},"12":{start:{line:159,column:8},end:{line:177,column:12}},"13":{start:{line:160,column:12},end:{line:175,column:13}},"14":{start:{line:161,column:27},end:{line:161,column:79}},"15":{start:{line:162,column:30},end:{line:162,column:40}},"16":{start:{line:163,column:32},end:{line:163,column:84}},"17":{start:{line:163,column:60},end:{line:163,column:83}},"18":{start:{line:164,column:16},end:{line:165,column:53}},"19":{start:{line:164,column:38},end:{line:164,column:54}},"20":{start:{line:165,column:21},end:{line:165,column:53}},"21":{start:{line:167,column:16},end:{line:167,column:42}},"22":{start:{line:169,column:16},end:{line:169,column:33}},"23":{start:{line:171,column:16},end:{line:171,column:39}},"24":{start:{line:174,column:16},end:{line:174,column:71}},"25":{start:{line:433,column:0},end:{line:433,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:152,column:4},end:{line:152,column:5}},loc:{start:{line:152,column:29},end:{line:178,column:5}},line:152},"1":{name:"(anonymous_1)",decl:{start:{line:159,column:16},end:{line:159,column:17}},loc:{start:{line:159,column:28},end:{line:177,column:9}},line:159},"2":{name:"(anonymous_2)",decl:{start:{line:163,column:48},end:{line:163,column:49}},loc:{start:{line:163,column:60},end:{line:163,column:83}},line:163}},branchMap:{"0":{loc:{start:{line:153,column:8},end:{line:153,column:84}},type:"if",locations:[{start:{line:153,column:8},end:{line:153,column:84}},{start:{line:153,column:8},end:{line:153,column:84}}],line:153},"1":{loc:{start:{line:154,column:8},end:{line:154,column:72}},type:"if",locations:[{start:{line:154,column:8},end:{line:154,column:72}},{start:{line:154,column:8},end:{line:154,column:72}}],line:154},"2":{loc:{start:{line:156,column:8},end:{line:156,column:76}},type:"if",locations:[{start:{line:156,column:8},end:{line:156,column:76}},{start:{line:156,column:8},end:{line:156,column:76}}],line:156},"3":{loc:{start:{line:157,column:8},end:{line:157,column:84}},type:"if",locations:[{start:{line:157,column:8},end:{line:157,column:84}},{start:{line:157,column:8},end:{line:157,column:84}}],line:157},"4":{loc:{start:{line:164,column:16},end:{line:165,column:53}},type:"if",locations:[{start:{line:164,column:16},end:{line:165,column:53}},{start:{line:164,column:16},end:{line:165,column:53}}],line:164}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{// //----------------USERS--------------------//
// /**
// * Registers a user.
// * 
// * @param {string} name 
// * @param {string} surname 
// * @param {string} email 
// * @param {string} password 
// * @param {string} passwordConfirmation 
// */
// registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
// retrieveUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//             user.id = user._id.toString()
//             delete user._id
//             return user
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//     })()
// },
// updateUser(userId, data) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!data) throw Error('data should be defined')
//     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)
//     return (async () => {
//         try {
//             let result = await User.findByIdAndUpdate(userId, { $set: data }, { new: true, runValidators: true }).select('-__v').lean()
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateUserPicture(userId, url) {
//     debugger
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//         let pictures = [...user.pictures, url]
//         user = await User.findByIdAndUpdate(userId, { pictures }, { new: true, runValidators: true }).select('-__v ').lean()
//         user.id = user._id.toString()
//         delete user._id
//         return user
//     })()
// },
updateBoat(userId,boat){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;if(typeof userId!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[5]++;throw TypeError(userId+' is not a string');}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[6]++;if(!userId.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[7]++;throw Error('userId cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[8]++;if(!Object.keys(boat).length){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[9]++;throw Error('boat should be defined');}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[10]++;if(boat.constructor!==Object){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[11]++;throw TypeError(`${boat} is not an object`);}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[12]++;return(async()=>{cov_2gv5sl3f77.f[1]++;cov_2gv5sl3f77.s[13]++;try{let user=(cov_2gv5sl3f77.s[14]++,await User.findById(userId).select('-password -__v'));const boats=(cov_2gv5sl3f77.s[15]++,user.boats);let boatIndex=(cov_2gv5sl3f77.s[16]++,boats.findIndex(userBoat=>{cov_2gv5sl3f77.f[2]++;cov_2gv5sl3f77.s[17]++;return userBoat.id===boat.id;}));cov_2gv5sl3f77.s[18]++;if(boatIndex===-1){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[19]++;boats.push(boat);}else{cov_2gv5sl3f77.b[4][1]++;cov_2gv5sl3f77.s[20]++;boats.splice(boatIndex,1,boat);}cov_2gv5sl3f77.s[21]++;user.markModified('boats');cov_2gv5sl3f77.s[22]++;await user.save();cov_2gv5sl3f77.s[23]++;return boats[boatIndex];}catch(error){cov_2gv5sl3f77.s[24]++;throw new Error(`user with userId ${userId} not found`);}})();}});cov_2gv5sl3f77.s[25]++;module.exports=logic;