'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="0ee63088c7217ecd53326175fbad7691afc7a941";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:437,column:1}},"4":{start:{line:215,column:8},end:{line:215,column:88}},"5":{start:{line:215,column:43},end:{line:215,column:88}},"6":{start:{line:216,column:8},end:{line:216,column:92}},"7":{start:{line:216,column:45},end:{line:216,column:92}},"8":{start:{line:218,column:8},end:{line:242,column:12}},"9":{start:{line:220,column:34},end:{line:220,column:36}},"10":{start:{line:221,column:36},end:{line:221,column:38}},"11":{start:{line:223,column:12},end:{line:223,column:82}},"12":{start:{line:223,column:38},end:{line:223,column:81}},"13":{start:{line:224,column:12},end:{line:224,column:92}},"14":{start:{line:224,column:42},end:{line:224,column:91}},"15":{start:{line:226,column:12},end:{line:229,column:115}},"16":{start:{line:226,column:54},end:{line:226,column:88}},"17":{start:{line:227,column:17},end:{line:229,column:115}},"18":{start:{line:227,column:38},end:{line:227,column:98}},"19":{start:{line:228,column:17},end:{line:229,column:115}},"20":{start:{line:228,column:40},end:{line:228,column:98}},"21":{start:{line:229,column:17},end:{line:229,column:115}},"22":{start:{line:231,column:12},end:{line:237,column:14}},"23":{start:{line:232,column:16},end:{line:232,column:49}},"24":{start:{line:233,column:16},end:{line:233,column:33}},"25":{start:{line:234,column:16},end:{line:234,column:33}},"26":{start:{line:236,column:16},end:{line:236,column:29}},"27":{start:{line:240,column:12},end:{line:240,column:26}},"28":{start:{line:439,column:0},end:{line:439,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:213,column:4},end:{line:213,column:5}},loc:{start:{line:213,column:36},end:{line:245,column:5}},line:213},"1":{name:"(anonymous_1)",decl:{start:{line:218,column:16},end:{line:218,column:17}},loc:{start:{line:218,column:28},end:{line:242,column:9}},line:218},"2":{name:"(anonymous_2)",decl:{start:{line:223,column:28},end:{line:223,column:29}},loc:{start:{line:223,column:38},end:{line:223,column:81}},line:223},"3":{name:"(anonymous_3)",decl:{start:{line:224,column:30},end:{line:224,column:31}},loc:{start:{line:224,column:42},end:{line:224,column:91}},line:224},"4":{name:"(anonymous_4)",decl:{start:{line:231,column:34},end:{line:231,column:35}},loc:{start:{line:231,column:44},end:{line:237,column:13}},line:231}},branchMap:{"0":{loc:{start:{line:215,column:8},end:{line:215,column:88}},type:"if",locations:[{start:{line:215,column:8},end:{line:215,column:88}},{start:{line:215,column:8},end:{line:215,column:88}}],line:215},"1":{loc:{start:{line:216,column:8},end:{line:216,column:92}},type:"if",locations:[{start:{line:216,column:8},end:{line:216,column:92}},{start:{line:216,column:8},end:{line:216,column:92}}],line:216},"2":{loc:{start:{line:226,column:12},end:{line:229,column:115}},type:"if",locations:[{start:{line:226,column:12},end:{line:229,column:115}},{start:{line:226,column:12},end:{line:229,column:115}}],line:226},"3":{loc:{start:{line:226,column:16},end:{line:226,column:52}},type:"binary-expr",locations:[{start:{line:226,column:16},end:{line:226,column:31}},{start:{line:226,column:35},end:{line:226,column:52}}],line:226},"4":{loc:{start:{line:227,column:17},end:{line:229,column:115}},type:"if",locations:[{start:{line:227,column:17},end:{line:229,column:115}},{start:{line:227,column:17},end:{line:229,column:115}}],line:227},"5":{loc:{start:{line:228,column:17},end:{line:229,column:115}},type:"if",locations:[{start:{line:228,column:17},end:{line:229,column:115}},{start:{line:228,column:17},end:{line:229,column:115}}],line:228}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{// //----------------USERS--------------------//
// /**
// * Registers a user.
// * 
// * @param {string} name 
// * @param {string} surname 
// * @param {string} email 
// * @param {string} password 
// * @param {string} passwordConfirmation 
// */
// registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
// retrieveUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//             user.id = user._id.toString()
//             delete user._id
//             return user
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//     })()
// },
// updateUser(userId, data) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!data) throw Error('data should be defined')
//     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)
//     return (async () => {
//         try {
//             let result = await User.findByIdAndUpdate(userId, { $set: data }, { new: true, runValidators: true }).select('-__v').lean()
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateUserPicture(userId, url) {
//     debugger
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//         let pictures = [...user.pictures, url]
//         user = await User.findByIdAndUpdate(userId, { pictures }, { new: true, runValidators: true }).select('-__v ').lean()
//         user.id = user._id.toString()
//         delete user._id
//         return user
//     })()
// },
// updateBoat(userId, boat) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!Object.keys(boat).length) throw Error('boat should be defined')
//     if (boat.constructor !== Object) throw TypeError(`${boat} is not an object`)
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//             const boats = user.boats
//             let boatIndex = boats.findIndex(userBoat => userBoat.id === boat.id)
//             if (boatIndex === -1) boats.push(boat)
//             else boats.splice(boatIndex, 1, boat)
//             user.markModified('boats')
//             await user.save()
//             return boats[boatIndex]
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateBoatPicture(userId, boatId, url) {
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof boatId !== 'string') throw TypeError(`${boatId} is not a string`)
//     if (!boatId.trim().length) throw Error('boatId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//         let boatIndex = user.boats.findIndex(boat => boat.id === boatId)
//         if (boatIndex < 0) throw new Error(`boat with id ${boatId} not found`)
//         const boat = user.boats[boatIndex]
//         boat.pictures = [...boat.pictures, url]
//         user.markModified('boats')
//         await user.save()
//         return user.boats[boatIndex]
//     })()
// },
searchUsers(talents,languages){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;if(talents.constructor!==Array){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[5]++;throw TypeError(`${talents} is not an array`);}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[6]++;if(languages.constructor!==Array){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[7]++;throw TypeError(`${languages} is not an array`);}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[8]++;return(async()=>{cov_2gv5sl3f77.f[1]++;let results;let talentsToFilter=(cov_2gv5sl3f77.s[9]++,[]);let languagesToFilter=(cov_2gv5sl3f77.s[10]++,[]);cov_2gv5sl3f77.s[11]++;talents.forEach(talent=>{cov_2gv5sl3f77.f[2]++;cov_2gv5sl3f77.s[12]++;return talentsToFilter.push({"talents":talent});});cov_2gv5sl3f77.s[13]++;languages.forEach(language=>{cov_2gv5sl3f77.f[3]++;cov_2gv5sl3f77.s[14]++;return languagesToFilter.push({"languages":language});});cov_2gv5sl3f77.s[15]++;if((cov_2gv5sl3f77.b[3][0]++,!talents.length)&&(cov_2gv5sl3f77.b[3][1]++,!languages.length)){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[16]++;results=await User.find().lean();}else{cov_2gv5sl3f77.b[2][1]++;cov_2gv5sl3f77.s[17]++;if(!talents.length){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[18]++;results=await User.find({$or:languagesToFilter}).lean();}else{cov_2gv5sl3f77.b[4][1]++;cov_2gv5sl3f77.s[19]++;if(!languages.length){cov_2gv5sl3f77.b[5][0]++;cov_2gv5sl3f77.s[20]++;results=await User.find({$or:talentsToFilter}).lean();}else{cov_2gv5sl3f77.b[5][1]++;cov_2gv5sl3f77.s[21]++;results=await User.find({$and:[{$or:talentsToFilter},{$or:languagesToFilter}]}).lean();}}}cov_2gv5sl3f77.s[22]++;results=results.map(result=>{cov_2gv5sl3f77.f[4]++;cov_2gv5sl3f77.s[23]++;result.id=result._id.toString();cov_2gv5sl3f77.s[24]++;delete result._id;cov_2gv5sl3f77.s[25]++;delete result.__v;cov_2gv5sl3f77.s[26]++;return result;});cov_2gv5sl3f77.s[27]++;return results;})();}});cov_2gv5sl3f77.s[28]++;module.exports=logic;