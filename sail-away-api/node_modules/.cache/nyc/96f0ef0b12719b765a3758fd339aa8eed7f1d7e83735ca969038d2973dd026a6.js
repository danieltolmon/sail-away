'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="5514dba1841d3381fc5907660a1ac7e636252665";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:421,column:1}},"4":{start:{line:58,column:8},end:{line:58,column:82}},"5":{start:{line:58,column:39},end:{line:58,column:82}},"6":{start:{line:59,column:8},end:{line:59,column:70}},"7":{start:{line:59,column:34},end:{line:59,column:70}},"8":{start:{line:61,column:8},end:{line:61,column:88}},"9":{start:{line:61,column:42},end:{line:61,column:88}},"10":{start:{line:62,column:8},end:{line:62,column:76}},"11":{start:{line:62,column:37},end:{line:62,column:76}},"12":{start:{line:64,column:8},end:{line:75,column:12}},"13":{start:{line:65,column:25},end:{line:65,column:54}},"14":{start:{line:67,column:12},end:{line:67,column:72}},"15":{start:{line:67,column:23},end:{line:67,column:72}},"16":{start:{line:69,column:26},end:{line:69,column:71}},"17":{start:{line:71,column:12},end:{line:71,column:56}},"18":{start:{line:71,column:24},end:{line:71,column:56}},"19":{start:{line:73,column:12},end:{line:73,column:34}},"20":{start:{line:423,column:0},end:{line:423,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:38},end:{line:77,column:5}},line:57},"1":{name:"(anonymous_1)",decl:{start:{line:64,column:16},end:{line:64,column:17}},loc:{start:{line:64,column:28},end:{line:75,column:9}},line:64}},branchMap:{"0":{loc:{start:{line:58,column:8},end:{line:58,column:82}},type:"if",locations:[{start:{line:58,column:8},end:{line:58,column:82}},{start:{line:58,column:8},end:{line:58,column:82}}],line:58},"1":{loc:{start:{line:59,column:8},end:{line:59,column:70}},type:"if",locations:[{start:{line:59,column:8},end:{line:59,column:70}},{start:{line:59,column:8},end:{line:59,column:70}}],line:59},"2":{loc:{start:{line:61,column:8},end:{line:61,column:88}},type:"if",locations:[{start:{line:61,column:8},end:{line:61,column:88}},{start:{line:61,column:8},end:{line:61,column:88}}],line:61},"3":{loc:{start:{line:62,column:8},end:{line:62,column:76}},type:"if",locations:[{start:{line:62,column:8},end:{line:62,column:76}},{start:{line:62,column:8},end:{line:62,column:76}}],line:62},"4":{loc:{start:{line:67,column:12},end:{line:67,column:72}},type:"if",locations:[{start:{line:67,column:12},end:{line:67,column:72}},{start:{line:67,column:12},end:{line:67,column:72}}],line:67},"5":{loc:{start:{line:71,column:12},end:{line:71,column:56}},type:"if",locations:[{start:{line:71,column:12},end:{line:71,column:56}},{start:{line:71,column:12},end:{line:71,column:56}}],line:71}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{//----------------USERS--------------------//
/**
    * Registers a user.
    * 
    * @param {string} name 
    * @param {string} surname 
    * @param {string} email 
    * @param {string} password 
    * @param {string} passwordConfirmation 
    */ // registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
/**
     * Authenticates user by its credentials.
     * 
     * @param {string} email 
     * @param {string} password 
     */authenticateUser(email,password){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;if(typeof email!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[5]++;throw TypeError(email+' is not a string');}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[6]++;if(!email.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[7]++;throw Error('email cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[8]++;if(typeof password!=='string'){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[9]++;throw TypeError(password+' is not a string');}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[10]++;if(!password.trim().length){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[11]++;throw Error('password cannot be empty');}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[12]++;return(async()=>{cov_2gv5sl3f77.f[1]++;const user=(cov_2gv5sl3f77.s[13]++,await User.findOne({email}));cov_2gv5sl3f77.s[14]++;if(!user){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[15]++;throw Error(`user with email ${email} not found`);}else{cov_2gv5sl3f77.b[4][1]++;}const match=(cov_2gv5sl3f77.s[16]++,await bcrypt.compare(password,user.password));cov_2gv5sl3f77.s[17]++;if(!match){cov_2gv5sl3f77.b[5][0]++;cov_2gv5sl3f77.s[18]++;throw Error('wrong credentials');}else{cov_2gv5sl3f77.b[5][1]++;}cov_2gv5sl3f77.s[19]++;return{id:user.id};})();}});cov_2gv5sl3f77.s[20]++;module.exports=logic;