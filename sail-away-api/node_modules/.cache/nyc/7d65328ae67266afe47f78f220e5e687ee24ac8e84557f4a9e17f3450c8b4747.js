'use strict';var cov_2gv5sl3f77=function(){var path="C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js";var hash="5879b6e69cbe78d12a07cc1d4bae2af6130676f2";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Supernova\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\daniel-toledo\\sail-away\\sail-away-api\\src\\logic\\index.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:35}},"1":{start:{line:4,column:119},end:{line:4,column:144}},"2":{start:{line:5,column:15},end:{line:5,column:32}},"3":{start:{line:7,column:14},end:{line:443,column:1}},"4":{start:{line:383,column:8},end:{line:383,column:85}},"5":{start:{line:383,column:40},end:{line:383,column:85}},"6":{start:{line:384,column:8},end:{line:384,column:73}},"7":{start:{line:384,column:35},end:{line:384,column:73}},"8":{start:{line:386,column:8},end:{line:386,column:90}},"9":{start:{line:386,column:43},end:{line:386,column:90}},"10":{start:{line:387,column:8},end:{line:387,column:78}},"11":{start:{line:387,column:38},end:{line:387,column:78}},"12":{start:{line:389,column:8},end:{line:412,column:12}},"13":{start:{line:391,column:12},end:{line:397,column:13}},"14":{start:{line:392,column:27},end:{line:392,column:86}},"15":{start:{line:396,column:16},end:{line:396,column:67}},"16":{start:{line:399,column:35},end:{line:399,column:56}},"17":{start:{line:401,column:24},end:{line:401,column:59}},"18":{start:{line:403,column:12},end:{line:404,column:49}},"19":{start:{line:403,column:29},end:{line:403,column:62}},"20":{start:{line:404,column:17},end:{line:404,column:49}},"21":{start:{line:406,column:12},end:{line:406,column:136}},"22":{start:{line:408,column:12},end:{line:408,column:41}},"23":{start:{line:409,column:12},end:{line:409,column:27}},"24":{start:{line:411,column:12},end:{line:411,column:23}},"25":{start:{line:445,column:0},end:{line:445,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:382,column:4},end:{line:382,column:5}},loc:{start:{line:382,column:45},end:{line:413,column:5}},line:382},"1":{name:"(anonymous_1)",decl:{start:{line:389,column:16},end:{line:389,column:17}},loc:{start:{line:389,column:28},end:{line:412,column:9}},line:389}},branchMap:{"0":{loc:{start:{line:383,column:8},end:{line:383,column:85}},type:"if",locations:[{start:{line:383,column:8},end:{line:383,column:85}},{start:{line:383,column:8},end:{line:383,column:85}}],line:383},"1":{loc:{start:{line:384,column:8},end:{line:384,column:73}},type:"if",locations:[{start:{line:384,column:8},end:{line:384,column:73}},{start:{line:384,column:8},end:{line:384,column:73}}],line:384},"2":{loc:{start:{line:386,column:8},end:{line:386,column:90}},type:"if",locations:[{start:{line:386,column:8},end:{line:386,column:90}},{start:{line:386,column:8},end:{line:386,column:90}}],line:386},"3":{loc:{start:{line:387,column:8},end:{line:387,column:78}},type:"if",locations:[{start:{line:387,column:8},end:{line:387,column:78}},{start:{line:387,column:8},end:{line:387,column:78}}],line:387},"4":{loc:{start:{line:403,column:12},end:{line:404,column:49}},type:"if",locations:[{start:{line:403,column:12},end:{line:404,column:49}},{start:{line:403,column:12},end:{line:404,column:49}}],line:403}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_2gv5sl3f77.s[0]++,require('jsonwebtoken'));const{models:{User,Journey},data:{seas,languages,talents},mongoose:{Types:{ObjectId}},mongoose}=(cov_2gv5sl3f77.s[1]++,require('sail-away-data'));const bcrypt=(cov_2gv5sl3f77.s[2]++,require('bcrypt'));const logic=(cov_2gv5sl3f77.s[3]++,{// //----------------USERS--------------------//
/**
    * Registers a user.
    * 
    * @param {string} name 
    * @param {string} surname 
    * @param {string} email 
    * @param {string} password 
    * @param {string} passwordConfirmation 
    */ // registerUser(name, surname, email, password, passwordConfirmation, kind) {
//     if (typeof name !== 'string') throw TypeError(name + ' is not a string')
//     if (!name.trim().length) throw Error('name cannot be empty')
//     if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')
//     if (!surname.trim().length) throw Error('surname cannot be empty')
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')
//     if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')
//     if (password !== passwordConfirmation) throw Error('passwords do not match')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (user) throw Error(`user with email ${email} already exists`)
//         const hash = await bcrypt.hash(password, 10)
//         const { id } = await User.create({ name, surname, email, password: hash, kind })
//         return id
//     })()
// },
// /**
//  * Authenticates user by its credentials.
//  * 
//  * @param {string} email 
//  * @param {string} password 
//  */
// authenticateUser(email, password) {
//     if (typeof email !== 'string') throw TypeError(email + ' is not a string')
//     if (!email.trim().length) throw Error('email cannot be empty')
//     if (typeof password !== 'string') throw TypeError(password + ' is not a string')
//     if (!password.trim().length) throw Error('password cannot be empty')
//     return (async () => {
//         const user = await User.findOne({ email })
//         if (!user) throw Error(`user with email ${email} not found`)
//         const match = await bcrypt.compare(password, user.password)
//         if (!match) throw Error('wrong credentials')
//         return { id: user.id }
//     })()
// },
// retrieveUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//             user.id = user._id.toString()
//             delete user._id
//             return user
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//     })()
// },
// updateUser(userId, data) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!data) throw Error('data should be defined')
//     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)
//     return (async () => {
//         try {
//             let result = await User.findByIdAndUpdate(userId, { $set: data }, { new: true, runValidators: true }).select('-__v').lean()
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateUserPicture(userId, url) {
//     debugger
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v').lean()
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//         let pictures = [...user.pictures, url]
//         user = await User.findByIdAndUpdate(userId, { pictures }, { new: true, runValidators: true }).select('-__v ').lean()
//         user.id = user._id.toString()
//         delete user._id
//         return user
//     })()
// },
// updateBoat(userId, boat) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (!Object.keys(boat).length) throw Error('boat should be defined')
//     if (boat.constructor !== Object) throw TypeError(`${boat} is not an object`)
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//             const boats = user.boats
//             let boatIndex = boats.findIndex(userBoat => userBoat.id === boat.id)
//             if (boatIndex === -1) boats.push(boat)
//             else boats.splice(boatIndex, 1, boat)
//             user.markModified('boats')
//             await user.save()
//             return boats[boatIndex]
//         } catch (error) {
//             throw new Error(`user with userId ${userId} not found`)
//         }
//     })()
// },
// updateBoatPicture(userId, boatId, url) {
//     if (typeof userId !== 'string') throw TypeError(`${userId} is not a string`)
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     if (typeof boatId !== 'string') throw TypeError(`${boatId} is not a string`)
//     if (!boatId.trim().length) throw Error('boatId cannot be empty')
//     if (typeof url !== 'string') throw TypeError(`${url} is not a string`)
//     if (!url.trim().length) throw Error('url cannot be empty')
//     return (async () => {
//         try {
//             let user = await User.findById(userId).select('-password -__v')
//         } catch (error) {
//             throw new Error(`user with id ${userId} not found`)
//         }
//         let boatIndex = user.boats.findIndex(boat => boat.id === boatId)
//         if (boatIndex < 0) throw new Error(`boat with id ${boatId} not found`)
//         const boat = user.boats[boatIndex]
//         boat.pictures = [...boat.pictures, url]
//         user.markModified('boats')
//         await user.save()
//         return user.boats[boatIndex]
//     })()
// },
// searchUsers(talents, languages) {
//     if (talents.constructor !== Array) throw TypeError(`${talents} is not an array`)
//     if (languages.constructor !== Array) throw TypeError(`${languages} is not an array`)
//     return (async () => {
//         let results
//         let talentsToFilter = []
//         let languagesToFilter = []
//         talents.forEach(talent => talentsToFilter.push({ "talents": talent }))
//         languages.forEach(language => languagesToFilter.push({ "languages": language }))
//         if (!talents.length && !languages.length) results = await User.find().lean()
//         else if (!talents.length) results = await User.find({ $or: languagesToFilter }).lean()
//         else if (!languages.length) results = await User.find({ $or: talentsToFilter }).lean()
//         else results = await User.find({ $and: [{ $or: talentsToFilter }, { $or: languagesToFilter }] }).lean()
//         results = results.map(result => {
//             result.id = result._id.toString()
//             delete result._id
//             delete result.__v
//             return result
//         })
//         return results
//     })()
// },
// removeUser(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return User.findByIdAndDelete(userId)
// },
// //----------------JOURNEYS--------------------//
// addJourney(title, seaId, route, dates, description, userId, boat, lookingFor) {
//     debugger
//     if (typeof title !== 'string') throw TypeError(title + ' is not a string')
//     if (!title.trim().length) throw Error('title cannot be empty')
//     if (typeof seaId !== 'string') throw TypeError(seaId + ' is not a string')
//     if (!seaId.trim().length) throw Error('seaId cannot be empty')
//     if (route.constructor !== Array) throw TypeError(route + ' is not an Array')
//     if (!route.length) throw Error('route cannot be empty')
//     if (dates.constructor !== Array) throw TypeError(dates + ' is not an Array')
//     if (!dates.length) throw Error('dates cannot be empty')
//     if (typeof description !== 'string') throw TypeError(description + ' is not a string')
//     if (!description.trim().length) throw Error('description cannot be empty')
//     if (userId.constructor !== ObjectId) throw TypeError(userId + ' is not an ObjectId')
//     if (boat.constructor !== Object) throw TypeError(boat + ' is not an Object')
//     if (!Object.keys(boat).length) throw Error('boat cannot be empty')
//     if (lookingFor.constructor !== Object) throw TypeError(lookingFor + ' is not an Object')
//     if (!Object.keys(lookingFor).length) throw Error('lookingFor cannot be empty')
//     return (async () => {
//         let user = await User.findById(userId.toString())
//         debugger
//         if (!(user.boats.find(b=>b.id===boat.id)))  throw Error('boat does not belong to user')
//         const journey = new Journey({ title, seaId, route, dates, description, userId, boat, lookingFor })
//         await journey.save()
//         return journey.id
//     })()
// },
// searchJourneys(query) {
//     if (typeof query !== 'string') throw TypeError(query + ' is not a string')
//     if (!query.trim().length) throw Error('query cannot be empty')
//     return (async () => {
//         const results = await Journey.find({ seaId: query }).lean()
//         results.map(result => {
//             result.id = result._id.toString()
//             delete result._id
//             delete result.__v
//             return result
//         })
//         return results
//     })()
// },
// retrieveJourney(id) {
//     if (typeof id !== 'string') throw TypeError(id + ' is not a string')
//     if (!id.trim().length) throw Error('id cannot be empty')
//     return (async () => {
//         const result = await Journey.findById(id).select('-__v').lean()
//         if (!result) return { error: 'journey not found' }
//         else {
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         }
//     })()
// },
// updateJourney(id, data) {
//     if (typeof id !== 'string') throw TypeError(id + ' is not a string')
//     if (!id.trim().length) throw Error('id cannot be empty')
//     if (data.constructor !== Object) throw TypeError(data + ' is not an Object')
//     if (!Object.keys(data).length) throw Error('data cannot be empty')
//     return (async () => {
//         const result = await Journey.findByIdAndUpdate(id, { $set: data }, { new: true }).select('-__v').lean()
//         debugger
//         if (!result) return { error: 'journey could not be updated' }
//         else {
//             result.id = result._id.toString()
//             delete result._id
//             return result
//         }
//     })()
// },
// myJourneys(userId) {
//     if (typeof userId !== 'string') throw TypeError(userId + ' is not a string')
//     if (!userId.trim().length) throw Error('userId cannot be empty')
//     return (async () => {
//         userId = ObjectId(userId)
//         const results = await Journey.find({ userId }).lean()
//         results.map(result => {
//             result.id = result._id.toString()
//             delete result._id
//             delete result.__v
//             return result
//         })
//         return results
//     })()
// },
// deleteJourney(id) {
//     if (typeof id !== 'string') throw TypeError(id + ' is not a string')
//     if (!id.trim().length) throw Error('id cannot be empty')
//     return (async () => {
//         const { id } = await Journey.findByIdAndDelete(id)
//         return id
//     })()
// },
toggleFavoriteJourney(userId,journeyId){cov_2gv5sl3f77.f[0]++;cov_2gv5sl3f77.s[4]++;if(typeof userId!=='string'){cov_2gv5sl3f77.b[0][0]++;cov_2gv5sl3f77.s[5]++;throw TypeError(userId+' is not a string');}else{cov_2gv5sl3f77.b[0][1]++;}cov_2gv5sl3f77.s[6]++;if(!userId.trim().length){cov_2gv5sl3f77.b[1][0]++;cov_2gv5sl3f77.s[7]++;throw Error('userId cannot be empty');}else{cov_2gv5sl3f77.b[1][1]++;}cov_2gv5sl3f77.s[8]++;if(typeof journeyId!=='string'){cov_2gv5sl3f77.b[2][0]++;cov_2gv5sl3f77.s[9]++;throw TypeError(journeyId+' is not a string');}else{cov_2gv5sl3f77.b[2][1]++;}cov_2gv5sl3f77.s[10]++;if(!journeyId.trim().length){cov_2gv5sl3f77.b[3][0]++;cov_2gv5sl3f77.s[11]++;throw Error('journeyId cannot be empty');}else{cov_2gv5sl3f77.b[3][1]++;}cov_2gv5sl3f77.s[12]++;return(async()=>{cov_2gv5sl3f77.f[1]++;cov_2gv5sl3f77.s[13]++;try{let user=(cov_2gv5sl3f77.s[14]++,await User.findById(userId).select('-password -__v').lean());}catch(error){cov_2gv5sl3f77.s[15]++;throw new Error(`user with id ${userId} not found`);}let favoriteJourneys=(cov_2gv5sl3f77.s[16]++,user.favoriteJourneys);let index=(cov_2gv5sl3f77.s[17]++,favoriteJourneys.indexOf(journeyId));cov_2gv5sl3f77.s[18]++;if(index!=-1){cov_2gv5sl3f77.b[4][0]++;cov_2gv5sl3f77.s[19]++;favoriteJourneys.splice(index,1);}else{cov_2gv5sl3f77.b[4][1]++;cov_2gv5sl3f77.s[20]++;favoriteJourneys.push(journeyId);}cov_2gv5sl3f77.s[21]++;user=await User.findByIdAndUpdate(userId,{favoriteJourneys},{new:true,runValidators:true}).select('-__v ').lean();cov_2gv5sl3f77.s[22]++;user.id=user._id.toString();cov_2gv5sl3f77.s[23]++;delete user._id;cov_2gv5sl3f77.s[24]++;return user;})();}});cov_2gv5sl3f77.s[25]++;module.exports=logic;